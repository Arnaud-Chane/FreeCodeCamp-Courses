/*
    inline html style
    comments in css (comme là)
    <style> element en haut du doc html
    Class avec .red-text [dans style ou dans css file] 
    font-size:
    font-family
    import font from url
    width
    multi class to a single element
    border-radius pour rendre plus arondi
    background-color
    id avec #
    padding
    [type='nomType']

    absolute (in = inches et mm = millimeters) vs relative units (em based on the size of font element et rem)

    Inherit style from the body element
    
    hex color
    create a custom CSS variable --penguin-skin: gray;
    Use a custom CSS Variable
    :root
    @media (max-width: 350px);




*/





/* 


    <h2 style="color: red;">CatPhotoApp</h2>

    ou alors si on est encore dans un document html

<style>
    h2 {
      color: red;
    }

</style>


<h2>CatPhotoApp</h2>

*******************************************************************

<style>
  .red-text {
    color: red;
    font-size: 16px;
    font-family: monospace;
    
  }
</style>

<h2 class="red-text">CatPhotoApp</h2>

*******************************************************************

<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">     dans head
then dans css on pourra ecrire:

h2 {
  font-family: lobster;
}

*******************************************************************

p {
  font-family: Helvetica, sans-serif;
}
au cas où le premier font ne fonctionnerait pas

.smaller-image {
  width: 100px;
}

*******************************************************************

on peut appliquer plusieurs classes à un element html.

.blog-para {
  font-size: 10px;
  background-color: silver;
}

.game-cheese {
  border-color: red;
  border-width: 10px;
  border-style: solid;
  border-radius: 10px
}

<p class="blog-para game-cheese">blabla lorem</p>


*******************************************************************

#unique-para {
  background-color: red;
}

<p id="unique-para">Voilàlorem</p>


*******************************************************************

h5 {
  padding: 10px;
  margin: 10px;
}

les margin peuent avoir des valeurs negatives

h3 {
  padding-top: 40px;
  padding-left: 40px;
  padding-bottom: 20px;
  padding-right: 20px;
  margin: 40px 20px 40px 20px;
}

[type='checkbox'] {
  margin: 10px 0px 15px 0px;
}


*******************************************************************

padding: 1.5em;



<style>
  body {
    background-color: black;
    color: green;
    font-family: monospace;
  }

</style>


<h1>Hello World</h1>



*******************************************************************


<style>
  body {
    background-color: black;
    font-family: monospace;
    color: green;
  }

  .pink-text {
    color: pink;
  }

==>ici la class="blue-text" est situé aprés pink-text, donc blue override pink

  .blue-text {
    color: blue;
  }
</style>

<body>

  <h1 class="pink-text blue-text">Hello World</h1> ==>ici pas rigide sur ordre des class ==> important surtout dans la partie style

</body>




<script>
  #orange-text {
    color: orange;
  }

<h1 class="pink-text blue-text" id="orange-text">Hello World</h1>

==> id prévaut sur les class qu'importe sa position dans script




<h1 id="orange-text" class="pink-text blue-text" style="color: green;">Hello World!</h1>
     ==> ici même avec class et id, puisqu'on a marque style directement dans l'element ==> override



okay, last thing that override everything else :

color: red !important;

n'importe où.

*******************************************************************



color: black;
=
color: #000000;
      #redgreenblue

#FF0016
F = le plus elevé
0 = absence total de la couleur


on peut aussi raccourcir hex code en ecrivant seulement 3 caractéres
color: #F00;
=
color: #FF0000;


et on peut aussi ecrire avec rgb(0, 0, 0)
color: rgb(0, 0, 0);




*******************************************************************

variable créé !
.penguin {
  --penguin-skin: gray;
}


and we can use it after elsewhere
background-color: var(--penguin-skin);

and if problem
background-color: var(--penguin-skin, black);


mettre des variables dans :root tout en haut du document permet d'accéder à une variable partout aprés.
:root {
  --penguin-belly: pink;
}



pour changer de valeur une variable, suffit de changer la variable aprés n'importe où:
:root {
  --penguin-skin: white;
}

  .penguin-belly {
    --penguin-skin: pink;
  }
  



Une fois que les variables ont été déterminées, elles peuvent encore être changées avec @media si l'écran 

:root {
  --penguin-belly: black;

}


@media (max-width: 350px) {
  :root {
    --penguin-belly: white;
  }
}









